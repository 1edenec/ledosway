#!/bin/bash
#########################################################
###         Unalies default oh-my-zsh alieses         ###
#########################################################
# unalias ll
# unalias ls
# unalias lsa

#########################################################
###                     Aliases                       ###
#########################################################

## Unusual
# kitty pictures
#alias icat="kitty +kitten icat"
# Usual
alias sudo="sudo "
alias cls="clear"
alias ..="cd .."
alias cd..="cd .."
alias home="cd ~"
alias df="df -ahiT --total"
alias mkdir="mkdir -pv"
alias userlist="cut -d: -f1 /etc/passwd"
alias fhere="find . -name "
alias free="free -mt"
alias ps="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias wget="wget -c"
alias histg="history | grep"
alias myip="curl http://ipecho.net/plain; echo"
alias logs="find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"
alias folders='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias speedtest="curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -"

alias lf="lfrun"

alias -s {mp3,m4a,flac}="mpv"
alias -s {png,jpg,tiff,bmp}="sxiv"
alias -s {conf,txt}="nvim"

alias porn="mpv 'http://www.pornhub.com/random'"

alias mvis="ncmpcpp -S visualizer"
alias m="ncmpcpp"

# Specific
alias bspwmconf="nvim ~/.config/bspwm/bspwmrc"
alias sxhkdconf="nvim ~/.config/sxhkd/sxhkdrc"
alias zshconf="nvim $ZDOTDIR/.zshrc"
alias polybarconf="nvim $HOME/.config/polybar/config"
alias running_services="systemctl list-units --type=service --state=running"


alias zshalias="nvim $ZDOTDIR/.aliases"
alias torstart="sudo systemctl start tor"
alias torstop="sudo systemctl stop tor"

# paste output to termbin
alias tb="nc termbin.com 9999"

#########################################################
####                Colored Output                    ###
#########################################################

alias cvs="grc --colour=auto cvs"
alias diff="grc --colour=auto diff"
alias esperanto="grc --colour=auto esperanto"
alias gcc="grc --colour=auto gcc"
alias irclog="grc --colour=auto irclog"
alias ldap="grc --colour=auto ldap"
alias log="grc --colour=auto log"
alias netstat="grc --colour=auto netstat"
alias ping="grc --colour=auto ping"
alias proftpd="grc --colour=auto proftpd"
alias traceroute="grc --colour=auto traceroute"
alias wdiff="grc --colour=auto wdiff"
alias dig="grc --colour=auto dig"
alias zcat="grc --colour=auto zcat"
alias make="grc --colour=auto make"
alias gcc="grc --colour=auto gcc"
alias g++="grc --colour=auto g++"
alias head="grc --colour=auto head"
alias mount="grc --colour=auto mount"
alias ps="grc --colour=auto ps"
alias mtr="grc --colour=auto mtr"
alias zgrep="grc --colour=auto zgrep"
alias grep='grep --color=auto'

alias ll="grc --colour=auto ls -l"
alias lsa="grc --colour=auto ls -la"
alias ls="ls --color=always"
alias lsn="nnn -dHU"
alias nnn="nnn -HUx"
alias sudo_nnn="sudo -E nnn -dHUx"

# Clean ass
alias sorthist='sort -t ";" -k 2 -u $ZDOTDIR/.zhistory | sort -o $ZDOTDIR/.zhistory'
alias cleancacheU='sudo paccache -ruk0 --verbose'
alias cleancache='sudo paccache -rk1 --verbose'
alias orphandel='pacman -Rns $(pacman -Qtdq)'

alias reboot='veracrypt -d && systemctl reboot'
alias poweroff='veracrypt -d && systemctl poweroff'

# распаковать архив не указывая тип распаковщика
function ex {
 if [ -z "$1" ]; then
	# display usage if no parameters given
	echo "Использование: ex <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
	if [ -f "$1" ] ; then
		NAME=${1%.*}
		#mkdir $NAME && cd $NAME
		case "$1" in
			*.tar.bz2)   tar xvjf ./"$1"    ;;
			*.tar.gz)    tar xvzf ./"$1"    ;;
			*.tar.xz)    tar xvJf ./"$1"    ;;
			*.lzma)      unlzma ./"$1"      ;;
			*.bz2)       bunzip2 ./"$1"     ;;
			*.rar)       unrar x -ad ./"$1" ;;
			*.gz)        gunzip ./"$1"      ;;
			*.tar)       tar xvf ./"$1"     ;;
			*.tbz2)      tar xvjf ./"$1"    ;;
			*.tgz)       tar xvzf ./"$1"    ;;
			*.zip)       unzip ./"$1"       ;;
			*.Z)         uncompress ./"$1"  ;;
			*.7z)        7z x ./"$1"        ;;
			*.xz)        unxz ./"$1"        ;;
			*.exe)       cabextract ./"$1"  ;;
			*)           echo "ex: '$1' - Не может быть распакован" ;;
		esac
	else
		echo "'$1' - не является допустимым файлом"
	fi
fi
}

# Упаковка в архив командой pk 7z /что/мы/пакуем имя_файла.7z
function pk () {
	if [ $1 ] ; then
		case $1 in
			tbz)       tar cjvf $2.tar.bz2 $2      ;;
			tgz)       tar czvf $2.tar.gz  $2       ;;
			txz)       tar -caf $2.tar.xz  $2       ;;
			tar)       tar cpvf $2.tar  $2       ;;
			bz2)       bzip $2 ;;
			gz)        gzip -c -9 -n $2 > $2.gz ;;
			zip)       zip -r $2.zip $2   ;;
			7z)        7z a $2.7z $2    ;;
			*)         echo "'$1' не может быть упакован с помощью pk()" ;;
		esac
	else
		echo "'$1' не является допустимым файлом"
	fi
}

alias yt="youtube-viewer"
ytv () {
	youtube-viewer "$1"
}

# youtube-dl --ignore-errors -o '~/Видео/youtube/%(playlist)s/%(title)s.%(ext)s' https://www.youtube.com/playlist?list=PL-UzghgfytJQV-JCEtyuttutudMk7
# Загрузка Видео ~/Videos или ~/Видео
# Пример: dlv https://www.youtube.com/watch?v=gBAfejjUQoA
ytv () {
	youtube-dl --ignore-errors -o '~/Videos/youtube/%(title)s.%(ext)s' "$1"
}
# dlp https://www.youtube.com/playlist?list=PL-UzghgfytJQV-JCEtyuttutudMk7
ytp () {
	youtube-dl --ignore-errors -o '~/Videos/youtube/%(playlist)s/%(title)s.%(ext)s' "$1"
}

# Загрузка аудио ~/Music или ~/Музыка
# Пример: mp3 https://www.youtube.com/watch?v=gBAfejjUQoA
mp3 () {
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 -o '~/Music/youtube/%(title)s.%(ext)s' "$1"
}
# mp3p https://www.youtube.com/watch?v=-F7A24f6gNc&list=RD-F7A24f6gNc
mp3p () {
    youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 -o '~/Music/youtube/%(playlist)s/%(title)s.%(ext)s' "$1"
}

se() {
    du -a ~/.local/bin ~/.config | awk '{print $2}'| fzf | xargs -r $EDITOR
}

localip(){
    ip route get 8.8.8.8 | head -1 | awk '{print $7}'
}

publicip(){
	curl http://ifconfig.me/
}


paruI(){
	paru -Slq | fzf -m  --reverse --preview 'paru -Si {1}' | xargs -ro paru -S
}

paruR(){
paru -Qqe | fzf -m --reverse --preview 'paru -Si {1}' | xargs -ro paru -R
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}


# fh - repeat history
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}

#  Handy bash/zsh shell function to list files by mime-type in current directory
# to show video files, run: list video
list ()
         {
             find . -maxdepth 20 | file -if- | grep "$1" | awk -F: '{printf "%s ", $1}' | nnn
         }

# PROG: aDisplay the size of all dirs at $PWD
function dirsize()
{
	if [ -z $1 ]; then
		dir="."
	else
		dir=$1
	fi
	find $dir -type d -maxdepth 1 -mindepth 1 -exec du -sh '{}' \; 2>/dev/null \
	| perl -pe "s/\t.*\/(.*)$/\t$(echo '\033[01;32m')\1$(echo '\033[0m')/gi"
	echo
	echo "Total: " $(du -sh $dir 2>/dev/null | awk '{print $1}')
}


# SEARCH: summarized google, ggogle, mggogle, agoogle and fm
function search()
{
	case "$1" in
		-g) ${BROWSER:-lynx} http://www.google.com/search\?q=$2
		;;
		-u) ${BROWSER:-lynx} http://groups.google.com/groups\?q=$2
		;;
		-m) ${BROWSER:-lynx} http://groups.google.com/groups\?selm=$2
		;;
		-a) ${BROWSER:-lynx} http://groups.google.com/groups\?as_uauthors=$2
		;;
		-c) ${BROWSER:-lynx} http://search.cpan.org/search\?query=$2\&mode=module
		;;
		-f) ${BROWSER:-lynx} http://freshmeat.net/search/\?q=$2\&section=projects
		;;
		-F) ${BROWSER:-lynx} http://www.filewatcher.com/\?q=$2
		;;
		-G) ${BROWSER:-lynx} http://www.rommel.stw.uni-erlangen.de/~fejf/cgi-bin/pfs-web.pl\?filter-search_file=$2
		;;
		-s) ${BROWSER:-lynx} http://sourceforge.net/search/\?type=soft\&q=$2
		;;
		-w) ${BROWSER:-lynx} http://de.wikipedia.org/wiki/$2
		;;
		-W) ${BROWSER:-lynx} http://en.wikipedia.org/wiki/$2
		;;
		-d) lynx -source "http://dict.leo.org?$2" | grep -i "TABLE.*/TABLE" | sed "s/^.*\(<TABLE.*TABLE>\).*$/<HTML><BODY>\1<\/BODY><\/HTML>/" | lynx -stdin -dump -width=$COLUMNS -nolist;
		;;
		*)
		  echo "Usage: $0 {-g | -u | -m | -a | -f | -c | -F | -s | -w | -W | -d}"
		  echo "	-g:  Searching for keyword in google.com"
		  echo "	-u:  Searching for keyword in groups.google.com"
		  echo "	-m:  Searching for message-id in groups.google.com"
		  echo "	-a:  Searching for Authors in groups.google.com"
		  echo "	-c:  Searching for Modules on cpan.org."
		  echo "	-f:  Searching for projects on Freshmeat."
		  echo "	-F:  Searching for packages on FileWatcher."
		  echo "	-G:  Gentoo file search."
		  echo "	-s:  Searching for software on Sourceforge."
		  echo "	-w:  Searching for keyword at wikipedia (german)."
		  echo "	-W:  Searching for keyword at wikipedia (english)."
		  echo "	-d:  Query dict.leo.org ;)"
	esac
}



